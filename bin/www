#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('www-booking:server');
var fs = require('fs');
var http = require('http');

var https = require('https');

var options = {
    key : fs.readFileSync('/home/ec2-user/aliCertificate/214243098680862.key'),
    cert : fs.readFileSync('/home/ec2-user/aliCertificate/214243098680862.pem')
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8081');
var porthttps = normalizePort(process.env.PORTHTTPS || '8082');

app.set('port', port);
app.set('porthttps', porthttps);

/**
 * make a log directory, just in case it isn't there.
 */
try {
    require('fs').mkdirSync('./log');
} catch (e) {
    if (e.code != 'EEXIST') {
        console.error("Could not set up log directory, error was: ", e);
        process.exit(1);
    }
}

/**
 * Initialise log4js first, so we don't miss any log messages
 */
var log4js = require('log4js');
log4js.configure('./config/log4js.json');
var log = require('log4js').getLogger("startup");
//log.level ="debug";
log.debug("startup");


/**
 * Create HTTP server.
 */

var server = http.createServer(app).listen(app.get('port'),function(){

    console.log('http Server listening on port ' + app.get('port'));
});

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
//server.on('error', onError);
//server.on('listening', onListening);
https.createServer(options, app).listen(app.get('porthttps'), function() {
    console.log('https Server listening on port ' + app.get('porthttps'));
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
